pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    //stage('Checkout') {
     // steps {
       // sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/atul-yadav-git/Jenkins-Zero-To-Hero.git'
      //}
    //}
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    //stage('Static Code Analysis') {
      //environment {
        //SONAR_URL = "http://54.79.234.50:9000"
      //}
      //steps {
        //withCredentials([string(credentialsId: 'sonarqube-credentials', variable: 'SONAR_AUTH_TOKEN')]) {
          //sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        //}
      //}
    //}
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "atuldockerhub/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('dockerhub-credentials')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub-credentials") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "manifest-deployment-repo"
            GIT_USER_NAME = "atul-yadav-git"
        }
        steps {
            withCredentials([string(credentialsId: 'github-credentials', variable: 'GITHUB_TOKEN')]) {
                script {
                  // Read the deployment file
                      def deployment = readYaml file: 'deployment.yml'

                    // Get the current image
                      def currentImage = deployment['spec']['template']['spec']['containers'][0]['image']

                    // Extract the current tag
                      def currentTag = currentImage.split(':')[-1]

                    // Replace the current tag with the latest tag
                      def newImage = currentImage.replace(currentTag, latestImageTag)

                    // Update the image in the deployment file
                      deployment['spec']['template']['spec']['containers'][0]['image'] = newImage

                    // Write the updated deployment back to the file
                      writeYaml file: 'deployment.yml', data: deployment

                    sh '''
                        git config user.email "103098829+atul-yadav-git@users.noreply.github.com"
                        git config user.name "Atul yadav"
                        git clean -f -d                   
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${NEW_IMAGE_TAG}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
  }
}
